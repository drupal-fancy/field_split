<?php

/**
 * @file
 * Main file of Field Split module.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function field_split_field_formatter_info_alter(&$infos) {
  foreach ($infos as &$info) {
    // Add a settings array if no settings were found.
    if (!isset($info['settings']) || !is_array($info['settings'])) {
      $info['settings'] = array();
    }

    $info['settings'] += array(
      'field_split' => array(
        'split' => 0,
        'values' => 0,
      ),
    );
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_split_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  if (!isset($settings['field_split'])) {
    // We have to put something in the summary so that we can ever
    // set Field Split settings.
    $summary .= ' ';
    return;
  }

  // Normalize the settings.
  $split = $settings['field_split']['split'];
  $values = $settings['field_split']['values'];

  if ($split) {
    $summary = t('Will be split into @values fields', array('@values' => $values));
  }
  else {
    $summary .= ' ';
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function field_split_field_formatter_settings_form_alter(&$settings_form, $context) {
  $field = $context['field'];
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  if ($field['cardinality'] == 1) {
    return;
  }

  $settings_form['field_split']['split'] = array(
    '#title' => t('Split this field'),
    '#type' => 'checkbox',
    '#default_value' => $settings['field_split']['split'],
  );

  $options = array();

  // Build a list with available values.
  foreach(range(2, $field['cardinality'] + 1) as $number) {
    $options[$number - 1] = $number;
  }

  $settings_form['field_split']['values'] = array(
    '#title' => t('Values'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $settings['field_split']['values'],
    '#description' => t('Select the amount of fields in total.'),
    '#states' => array(
      'visible' => array(
        'input[name$="[settings][field_split][split]"]' => array('checked' => TRUE),
      ),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function field_split_field_extra_fields() {
  $extra['node']['container'] = array(
    'display' => array(
      'time' => array(
        'label' => t('Last updated date'),
        'description' => t('Display the date the article was last updated.'),
        'weight' => 99,
      ),
      'created' => array(
        'label' => t('Created date'),
        'description' => t('Display the date the article was created.'),
        'weight' => 100,
        'visible' => FALSE,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_form_field_ui_display_overview_form_alter().
 */
function field_split_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  $extra = field_split_field_extra_fields();
  if (!isset($extra[$form['#entity_type']], $extra[$form['#entity_type']][$form['#bundle']])) {
    return;
  }

  $extra_fields = array_keys($extra[$form['#entity_type']][$form['#bundle']]['display']);
  $extra_fields = array_intersect($extra_fields, $form['#extra']);

  if (empty($extra_fields)) {
    return;
  }

  // Get list of all available date formats.
  $formats = array();
  drupal_static_reset('system_get_date_formats');
  $date_formats = system_get_date_formats(); // Call this to rebuild the list, and to have default list.
  foreach ($date_formats as $type => $format_info) {
    $formats = array_merge($formats, $format_info);
  }
  $custom_formats = system_get_date_formats('custom');
  if (!empty($custom_formats)) {
    $formats = array_merge($formats, $custom_formats);
  }
  $choices = array();
  foreach ($formats as $f => $format) {
    $choices[$f] = format_date(REQUEST_TIME, 'custom', $f);
  }

  foreach ($extra_fields as $field_name) {
    $form['fields'][$field_name]['settings_edit'] = array(
      '#type' => 'select',
      '#options' => $choices,
      '#default_value' => variable_get('example_' . $field_name . '_format_' . $form['#entity_type'] . '_' . $form['#bundle'] . '_' . $form['#view_mode'], 'g:iA'),
    );
    $form['fields'][$field_name]['settings_summary']['#markup'] = '<div class="field-formatter-summary">Date format</div>';
  }
  $form['#submit'][] = 'field_split_extra_field_date_format_submit';
}

/**
 * Save the view mode settings for time format.
 */
function field_split_extra_field_date_format_submit(&$form, &$form_state) {
  $extra = example_field_extra_fields();
  $extra_fields = array_keys($extra[$form['#entity_type']][$form['#bundle']]['display']);

  foreach ($extra_fields as $field_name) {
    if (!empty($form_state['values']['fields'][$field_name]['settings_edit'])) {
      variable_set('example_' . $field_name . '_format_' . $form['#entity_type'] . '_' . $form['#bundle'] . '_' . $form['#view_mode'], $form_state['values']['fields'][$field_name]['settings_edit']);
    }
  }
}
